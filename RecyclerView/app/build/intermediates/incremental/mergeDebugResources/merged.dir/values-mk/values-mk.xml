n,
                            java.lang.reflect.InvocationTargetException</PRE>
<DL>
<DD>JAX-WS runtimes calls this method to ask container to inject
 WebServiceContext on the endpoint instance. The
 <code>WebServiceContext</code> object uses thread-local information
 to return the correct information during the actual endpoint invocation
 regardless of how many threads are concurrently being used to serve
 requests.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>webServiceContext</CODE> - a holder for MessageContext
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalAccessException</CODE> - if the injection done
         by reflection API throws this exception
<DD><CODE>java.lang.IllegalArgumentException</CODE> - if the injection done
         by reflection API throws this exception
<DD><CODE>java.lang.reflect.InvocationTargetException</CODE> - if the injection done
         by reflection API throws this exception</DL>
</DD>
</DL>
<HR>

<A NAME="invoke(java.lang.reflect.Method, java.lang.Object...)"><!-- --></A><H3>
invoke</H3>
<PRE>
public abstract java.lang.Object <B>invoke</B>(java.lang.reflect.Method&nbsp;m,
                                        java.lang.Object...&nbsp;args)
                                 throws java.lang.IllegalAccessException,
                                        java.lang.IllegalArgumentException,
                                        java.lang.reflect.InvocationTargetException</PRE>
<DL>
<DD>JAX-WS runtime calls this method to do the actual web service
 invocation on endpoint instance. The injected
 <code>WebServiceContext.getMessageContext()</code> gives the correct
 information for this invocation.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>m</CODE> - Method to be invoked on the service<DD><CODE>args</CODE> - Method arguments
<DT><B>Returns:</B><DD>return value of the method
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalAccessException</CODE> - if the invocation done
         by reflection API throws this exception
<DD><CODE>java.lang.IllegalArgumentException</CODE> - if the invocation done
         by reflection API throws this exception
<DD><CODE>java.lang.reflect.InvocationTargetException</CODE> - if the invocation done
         by reflection API throws this exception<DT><B>See Also:</B><DD><CODE>Method.invoke(java.lang.Object, java.lang.Object...)</CODE></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&